@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@using System.Net;
@using CirrusWebApp.Data;

@inject IJSRuntime JS
@inject CosmosDbService CosmosService
@inject DataLakeSevice DataLakeService
@inject IHttpContextAccessor HttpContextAccessor
@inject AppState AppState
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider BrowserDateTimeProvider

<div>
    <div class="row">
        <div class="col-3">
            <button @onclick="GoBackClicked" type="button" class="btn btn-dark">
                <span class="oi oi-arrow-left" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col9 text-center">
            <h3>@Category</h3>
        </div>
    </div>
    <div class="row">
        <table class="table">
            <thead>
                <tr class="d-flex">
                    <th class="col-1">
                        <input type="checkbox" />
                    </th>
                    <th class="col-4">File Name:</th>
                    <th class="col-3">File Type:</th>
                    <th class="col-4">Last Modified:</th>
                </tr>
            </thead>
            <tbody>
                @foreach (File file in Files)
                {
                    <tr class="d-flex">
                        <td class="col-1">
                            <input type="checkbox" @onchange="ChangeEventArgs => { OnChecked(file, ChangeEventArgs); }" />
                        </td>
                        <td class="col-4">@file.FileTitle</td>
                        <td class="col-3">@file.FileExtension</td>
                        <td class="col-4">@file.LastModified</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col-1">
            <button @onclick="OnDelete" type="button" class="btn btn-danger">
                <span class="oi oi-trash" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="OnDownload" type="button" class="btn btn-secondary">
                <span class="oi oi-cloud-download" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col-1">
            <button @onclick="(() => { ShowUpload = !ShowUpload; })" type="button" class="btn btn-dark">
                <span class="oi oi-cloud-upload" aria-hidden="true"></span>
            </button>
        </div>
        @if (ShowUpload)
        {
            <div class="col-3 fade-in">
                <FileUploadComponent />
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<File> Files { get; set; }
    [Parameter]
    public string Category { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public Action<string> CategoryChanged { get; set; }

    private bool ShowUpload = false;


    List<File> SelectedFiles = new List<File>();
    DateTime CurrentTimeStampLocalized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AppState.OnChange += StateHasChanged;
        var browserDateTime = await BrowserDateTimeProvider.GetInstance();
        CurrentTimeStampLocalized = browserDateTime.Now;
    }

    void GoBackClicked()
    {
        CategoryChanged?.Invoke(null);
    }

    void OnChecked(File file, object CheckedEvent)
    {
        if (CheckedEvent is ChangeEventArgs e)
        {
            if ((bool)e.Value)
            {
                SelectedFiles.Add(file);
            }
            else
            {
                SelectedFiles.Remove(file);
            }
        }
    }

    async Task OnDelete()
    {
        foreach (File file in SelectedFiles)
        {
            await DataLakeService.DeleteFile(file);
            await CosmosService.DeleteFile(file);
            Files.Remove(file);
        }
    }

    async Task OnDownload()
    {
        var fileStream = await DataLakeService.DownloadFiles(SelectedFiles);
        string b64String = Convert.ToBase64String(fileStream.ToArray());

        await JS.InvokeVoidAsync(
            "BlazorFileSaver.saveAsBase64",
            CurrentTimeStampLocalized + "-cirrus.zip", b64String, "application/zip");
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
