@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@using System.Net;
@using CirrusWebApp.Data;
@using System.Text.RegularExpressions;

@inject IJSRuntime JS
@inject CosmosDbService CosmosService
@inject DataLakeService DataLakeService
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider BrowserDateTimeProvider
@inject ImageClassifierService ImageClassifier 

<div>
    <div class="row">
        <div class="col-3">
            <button @onclick="GoBackClicked" type="button" class="btn btn-dark">
                <span class="oi oi-arrow-left" aria-hidden="true"></span>
            </button>
        </div>
        <div class="col9 text-center">
            <h3>@Category</h3>
        </div>
    </div>
    @if (Files is not null)
    {
        <div class="row">
            <table class="table">
                <thead>
                    <tr class="d-flex">
                        <th class="col-1">
                            <input type="checkbox" @onclick="OnSelectAll"/>
                        </th>
                        <th class="col-3">File Name:</th>
                        <th class="col-3">File Type:</th>
                        <th class="col-2">Tags:</th>
                        <th class="col-3">Last Modified:</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (File file in Files)
                    {
                        <tr class="d-flex">
                            <td class="col-1">
                                <input type="checkbox" @onchange="ChangeEventArgs => { OnChecked(file, ChangeEventArgs); }" class="fileChkbox"/>
                            </td>
                            <td class="col-3">@file.FileTitle</td>
                            <td class="col-3">@file.FileExtension</td>
                            <td class="col-2">
                                @foreach (string tag in file.Tags)
                                {
                                    <a class="d-flex" href="#">@tag </a>
                                }
                            </td>
                            <td class="col-3">@file.LastModified</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" style="width: 200px; height: 200px;">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
<div class="row">
    <div class="col-1">
        <button @onclick="OnDelete" type="button" class="btn btn-danger" data-toggle="tooltip" data-placement="top" title="Delete the selected files">
            <span class="oi oi-trash" aria-hidden="true"></span>
        </button>
    </div>
    <div class="col-1">
        <button @onclick="OnDownload" type="button" class="btn btn-secondary" data-toggle="tooltip" data-placement="top" title="Download the selected files">
            <span class="oi oi-cloud-download" aria-hidden="true"></span>
        </button>
    </div>
    <div class="col-1">
        <button onclick="document.getElementById('fileSelect').click();" type="button" class="btn btn-dark" data-toggle="tooltip" data-placement="top" title="Upload one or more files to this category">
            <InputFile id="fileSelect" OnChange="FileAdd" Multiple style="display: none" />
            <span class="oi oi-cloud-upload" aria-hidden="true"></span>
        </button>
    </div>
</div>
</div>

@code {
    [Parameter]
    public List<File> Files { get; set; }
    [Parameter]
    public string Category { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public Action<string> CategoryChanged { get; set; }


    private IReadOnlyList<IBrowserFile> UploadFiles = new List<IBrowserFile>();
    private List<File> CirrusFiles;
    private EditContext Context;
    private List<string> ImageExtensions = new List<string>() { "jpg", "jpeg", "png" };

    List<File> SelectedFiles = new List<File>();
    DateTime CurrentTimeStampLocalized;

    protected override async Task OnInitializedAsync()
    {
        Files = await CosmosService.GetFiles(UserId, Category);
        Context = new EditContext(UploadFiles);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var browserDateTime = await BrowserDateTimeProvider.GetInstance();
        CurrentTimeStampLocalized = browserDateTime.Now;
    }

    private async Task FileAdd(InputFileChangeEventArgs e)
    {
        UploadFiles = e.GetMultipleFiles();
        CirrusFiles = new List<File>();
        foreach (IBrowserFile file in UploadFiles)
        {
            List<string> Tags = new();
            Regex regex = new Regex(@"[^A-ZÅÄÖa-zåäö0-9_\-\p{L}]");
            string FileTitle = file.Name.Substring(0, 0 + file.Name.LastIndexOf("."));
            FileTitle = regex.Replace(FileTitle, " ");
            var FileExtension = file.Name.Substring(file.Name.LastIndexOf(".") + 1);
            if (ImageExtensions.Contains(FileExtension))
            {
                Tags = await ImageClassifier.InvokeRequestResponseService(file);
            }
            CirrusFiles.Add(new File
            {
                UserId = UserId,
                id = Guid.NewGuid().ToString(),
                FileName = file.Name,
                FileTitle = FileTitle,
                FileExtension = FileExtension,
                Tags = Tags,
                Categories = new List<Category>() { new Category(Category, UserId) }
            }) ;
        }
        await Upload();
    }

    private async Task Upload()
    {
        for (int i = 0; i < UploadFiles.Count; i++)
        {
            IBrowserFile WebFile = UploadFiles[i];
            File CirrusFile = CirrusFiles[i];
            CirrusFile.LastModified = CurrentTimeStampLocalized;
            CirrusFile.PrimaryFilePath = await DataLakeService.UploadFile(WebFile, CirrusFile);

            await CosmosService.AddFile(CirrusFile);
            var existingFile = Files.FirstOrDefault(f => f.Equals(CirrusFile));
            if (existingFile is not null)
            {
                Files.Remove(existingFile);
            }

            Files.Add(CirrusFile);
        }
    }

    void GoBackClicked()
    {
        CategoryChanged?.Invoke(null);
    }

    void OnChecked(File file, object CheckedEvent)
    {
        if (CheckedEvent is ChangeEventArgs e)
        {
            if ((bool)e.Value)
            {
                SelectedFiles.Add(file);
            }
            else
            {
                SelectedFiles.Remove(file);
            }
        }
    }

    async Task OnDelete()
    {
        foreach (File file in SelectedFiles)
        {
            await DataLakeService.DeleteFile(file);
            await CosmosService.DeleteFile(file);
            Files.Remove(file);
        }
    }

    async Task OnDownload()
    {
        if (SelectedFiles.Count < 1)
        {
            return;
        }
        var fileStream = await DataLakeService.DownloadFiles(SelectedFiles);
        string b64String = Convert.ToBase64String(fileStream.ToArray());

        await JS.InvokeVoidAsync(
            "BlazorFileSaver.saveAsBase64",
            CurrentTimeStampLocalized + "-cirrus.zip", b64String, "application/zip");
    }

    async Task OnSelectAll()
    {
        if (SelectedFiles.Count == 0)
        {
            foreach(File file in Files)
            {
                SelectedFiles.Add(file);
            }
        }
        else
        {
            SelectedFiles.Clear();
        }
        await JS.InvokeVoidAsync("UpdateBoxes", "fileChkbox");
    }
}
