@using Microsoft.AspNetCore.Http
@using CirrusWebApp.Data.Models;
@using CirrusWebApp.Data.Services;
@using System.Text.RegularExpressions;

@inject IHttpContextAccessor HttpContextAccessor
@inject CosmosDbService CosmosService
@inject DataLakeSevice DataLakeSevice

<EditForm EditContext="Context" OnValidSubmit="Upload">
    <div class="form-group">
        <InputFile id="fileSelect" OnChange="FileAdd" Multiple style="display: none" />
        <input class="btn btn-dark btn-outline-light" type="button" value="Browse..." onclick="document.getElementById('fileSelect').click();" />
    </div>
    <div class="form-group">
        @if (CirrusFiles != null)
        {
            foreach (File file in CirrusFiles)
            {
                <div class="row">
                    <div class="col-6">
                        <p class="p-3">@file.FileTitle</p>
                    </div>
                    <div class="col-6">
                        <input @onchange="(ChangeEventArgs _event) => SetCategories(_event, file.FileName)" />
                    </div>
                </div>
            }
        }
        @if (UploadComplete != null)
        {
            if (UploadComplete == false)
            {
                <div class="spinner"></div>
            }
            else
            {
                <p><em>Completed!</em></p>
            }
        }
    </div>
    <div class="form-group">
        <button class="btn btn-success" type="submit">Upload</button>
    </div>
</EditForm>

@code {
    private IReadOnlyList<IBrowserFile> Files = new List<IBrowserFile>();
    private List<File> CirrusFiles;
    private EditContext Context;
    private bool? UploadComplete = null;

    protected override void OnInitialized()
    {
        Context = new EditContext(Files);
        base.OnInitialized();
    }

    private void FileAdd(InputFileChangeEventArgs e)
    {
        Files = e.GetMultipleFiles();
        CirrusFiles = new List<File>();
        foreach (IBrowserFile file in Files)
        {
            Regex regex = new Regex(@"[^A-ZÅÄÖa-zåäö0-9_\-\p{L}]");
            string FileTitle = file.Name.Substring(0, 0 + file.Name.LastIndexOf("."));
            FileTitle = regex.Replace(FileTitle, " ");
            string UserId = HttpContextAccessor.HttpContext.User.Claims.Where(u => u.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").FirstOrDefault().Value;
            CirrusFiles.Add(new File
            {
                id = UserId,
                FileName = file.Name,
                FileTitle = FileTitle,
                FileExtension = file.ContentType
            });
        }
    }

    private void SetCategories(ChangeEventArgs e, string fileName)
    {
        List<string> Categories = e.Value.ToString().Replace(" ", "").Split(";").ToList<string>();
        CirrusFiles.Where<File>(f => f.FileName == fileName).FirstOrDefault().Categories = Categories;
    }

    private async Task Upload()
    {
        UploadComplete = false;

        for (int i = 0; i < Files.Count; i++)
        {
            IBrowserFile WebFile = Files[i];
            File CirrusFile = CirrusFiles[i];
            CirrusFile.PrimaryFilePath = await DataLakeSevice.UploadFile(WebFile, CirrusFile,
            HttpContextAccessor.HttpContext.User.Claims.Where(u => u.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").FirstOrDefault().Value);

            await CosmosService.AddFile(CirrusFile);
        }

        UploadComplete = true;
    }
}
