@using System.Security.Claims;

@inject CosmosDbService CosmosService
@inject AuthenticationStateProvider AuthState
@inject DataLakeService DataLakeService


@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" style="width: 200px; height: 200px;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (!isLoading && SelectedCategory is null)
{
    <div class="d-flex justify-content-center">
        <h2>Categories</h2>
    </div>
        <div class="row">
            <div class="col-6">
                <h4>Add Category</h4>
                <input class="form-control" @bind="NewCategory.CategoryName" type="text" />
                <button class="btn btn-dark pr-3" @onclick="AddCategory">Submit</button>
            </div>
        </div>
    <div class="row card-group">
        @if (Categories.Count() > 0)
        {
            @foreach (Category Category in Categories)
            {
                <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 category-card">
                    <div @onclick="(() => DisplayComponent(Category))" class="card">
                        <div class="card-header bg-transparent">
                            <h4 class="card-title">@Category.CategoryName</h4>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}
else if (SelectedCategory is not null && !isLoading)
{
<FileCategoryComponent @ref="@CategoryComponent" UserId="@UserId" @bind-Category="@SelectedCategory.CategoryName" />
}

    @code {

        private List<Category> Categories = new List<Category>();
    private string UserId;
    private Category SelectedCategory;
    private Category NewCategory = new Category();
    FileCategoryComponent CategoryComponent = new FileCategoryComponent();
    private bool isLoading = true;

    protected override void OnAfterRender(bool firstRender)
    {
        CategoryComponent.CategoryChanged += NullifySelectedCategory;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var User = authState.User;
        UserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value is null ? User.FindFirst(ClaimTypes.Name).Value : User.FindFirst(ClaimTypes.NameIdentifier).Value;
        Categories = await CosmosService.GetCategories(UserId);
        isLoading = false;
        await base.OnInitializedAsync();
    }

    public void DisplayComponent(Category Category)
    {
        SelectedCategory = Category;
        StateHasChanged();
    }

    public async Task AddCategory()
    {
        NewCategory.UserId = UserId;
        NewCategory.id = Guid.NewGuid().ToString();
        await DataLakeService.CreateDirectory(NewCategory.CategoryName, UserId);
        await CosmosService.AddCategory(UserId, NewCategory);
        Categories.Add(NewCategory);
    }

    public async void NullifySelectedCategory(string category)
    {
        SelectedCategory = null;
        Categories = await CosmosService.GetCategories(UserId);
        StateHasChanged();
    }
    }
