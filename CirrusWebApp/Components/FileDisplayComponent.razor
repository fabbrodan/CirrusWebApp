@using Microsoft.AspNetCore.Http;
@using System.Security.Claims; 

@inject CosmosDbService CosmosService
@inject AuthenticationStateProvider AuthState

@if (UserFiles is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" style="width: 200px; height: 200px;">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@if (SelectedCategory is null)
{
    <div class="row card-group">
        @foreach (string Category in Categories)
        {
            <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12 category-card">
                <div @onclick="(() => DisplayComponent(Category))" class="card">
                    <div class="card-header">
                        <h4 class="card-title">@Category</h4>
                    </div>
                    <img class="card-img" src="resources/fileicon6.jpg" alt="file-bg-img" />
                </div>
            </div>
        }
    </div>
}
else
{
    <FileCategoryComponent @ref="@CategoryComponent" Files="@CategoryFiles" UserId="@UserId" @bind-Category="@SelectedCategory" />
}

@code {

    private List<string> Categories = new List<string>();
    private List<File> CategoryFiles;
    private List<File> UserFiles;
    private string UserId;
    private string SelectedCategory;
    FileCategoryComponent CategoryComponent = new FileCategoryComponent();

    protected override void OnAfterRender(bool firstRender)
    {
        CategoryComponent.CategoryChanged += NullifySelectedCategory;;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var User = authState.User;
        UserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value is null ? User.FindFirst(ClaimTypes.Name).Value : User.FindFirst(ClaimTypes.NameIdentifier).Value;
        UserFiles = await CosmosService.GetFiles(UserId);
        if (UserFiles is not null)
        {
            foreach (File file in UserFiles)
            {
                foreach (string category in file.Categories)
                {
                    if (!Categories.Contains(category))
                    {
                        Categories.Add(category);
                    }
                }
            }
        }
        await base.OnInitializedAsync();
    }

    public void DisplayComponent(string Category)
    {
        SelectedCategory = Category;
        CategoryFiles = UserFiles.Where(c => c.Categories.Contains(Category)).ToList();
    }

    public void NullifySelectedCategory(string category)
    {
        SelectedCategory = null;
        StateHasChanged();
    }
}
