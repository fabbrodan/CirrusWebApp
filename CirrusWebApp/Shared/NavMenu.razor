@using System.Security.Claims

@inject AuthenticationStateProvider AuthState


    <ul class="navbar-nav flex-row mr-5">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="/MyPage">
                        <span class="oi oi-file" aria-hidden="true"></span> My Page
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="/Settings">
                        <span class="oi oi-wrench" aria-hidden="true"></span> Settings
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="/Login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Sign In
                    </NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
    @if (User != null)
    {
        <ul class="navbar-nav flex-row ml-auto">
            <li class="nav-item">
                <p class="text-white float-right">@Firstname @Lastname</p>
            </li>
                @if (Avatar != null)
                {
        <li class="nav-item">
            <img style="width: 15px; height: 15px;" src="@Avatar" />
        </li>
                }
            <AuthorizeView>
                <Authorized>
                    <li class="nav-item">
                        <a class="text-white" href="/LogoutCall">Sign Out</a>
                    </li>
                </Authorized>
            </AuthorizeView>
        </ul>
    }

@code {

    private ClaimsPrincipal User;
    private string Firstname;
    private string Lastname;
    private string Avatar;

    protected override async Task OnInitializedAsync()
    {
        await SetupUser();
        await base.OnInitializedAsync();
    }

    private async Task SetupUser()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        User = authState.User;
        if (User != null)
        {
            Firstname = User.FindFirst(ClaimTypes.GivenName) == null ? "" : User.FindFirst(ClaimTypes.GivenName).Value;
            Lastname = User.FindFirst(ClaimTypes.Surname) == null ? "" : User.FindFirst(ClaimTypes.Surname).Value;
            Avatar = User.FindFirst("urn:google:image") == null ? null : User.FindFirst("urn:google:image").Value;
        }
    }
}
